---
- hosts: 127.0.0.1
  connection: local
  gather_facts: yes
  become: yes
  vars_files:
    - ./external_vars.yaml
  roles:
    - role: postgres
      tags: postgres_tag
    - role: nginx
      tags: nginx_tag
    - role: td-agent
      tags: td-agent_tag
    - role: rsyslogd
      tags: rsyslogd_tag
    - role: docker
      tags: docker_tag
  tasks:

    ##################################################
    # Configure psql database
     
    - name: Create postgresql superuser with encrypted password this will be the only user of the db
      shell: |
        psql -c "SELECT 1 FROM pg_roles WHERE rolname='{{ database_user }}'" | grep -q 1 ||  
        psql -c "CREATE USER {{ database_user }} WITH SUPERUSER ENCRYPTED PASSWORD '{{ database_password }}';"
      become_user: postgres
      no_log: true

    - name: Create database
      shell: | 
        psql -l | grep "{{ database_name }}" ||
        psql -c "CREATE DATABASE {{ database_name }};"
      become_user: postgres
      no_log: true

    ##################################################
    # Configure Nginx as a reverse proxy
    # This configuration is dependent on the SRC-NGINX component provided by Surf
    
    - name: Add ansible markers in /etc/nginx/conf.d/ssl_main.conf
      shell: perl -0 -i -pe 's/(.*server {.*?})(.*?)(listen 80.*)/\1\n# BEGIN ANSIBLE MANAGED BLOCK\n# END ANSIBLE MANAGED BLOCK\n\3/gms' /etc/nginx/conf.d/ssl_main.conf

    # Configure Nginx as reverse proxy added configs for Phoenix
    # The admin route is protected by Surf SRAM
    - name: Fill the location block of the ssl block
      blockinfile:
        path: /etc/nginx/conf.d/ssl_main.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          location /admin {
            error_page 401 = @custom_401;
            auth_request /validate;
            auth_request_set $username $upstream_http_username;

            allow all;
            proxy_pass                http://localhost:8000;
            proxy_set_header          X-Forwarded-Proto $scheme;
            proxy_set_header          X-Forwarded-For $remote_addr;
            proxy_set_header          X-Real-IP $remote_addr;
            proxy_set_header          Host $http_host;
            proxy_http_version        1.1;
            proxy_set_header          Upgrade $http_upgrade;
            proxy_set_header          Connection "upgrade";
            proxy_max_temp_file_size  1m;
          }

          location / {
            allow all;
            proxy_pass                http://localhost:8000;
            proxy_set_header          X-Forwarded-Proto $scheme;
            proxy_set_header          X-Forwarded-For $remote_addr;
            proxy_set_header          X-Real-IP $remote_addr;
            proxy_set_header          Host $http_host;
            proxy_http_version        1.1;
            proxy_set_header          Upgrade $http_upgrade;
            proxy_set_header          Connection "upgrade";
            proxy_max_temp_file_size  1m;
          }

    - name: After sram login redirect to the /admin/login route of Next
      shell: sed -i -e 's/return 302 $scheme:\/\/$http_host\/;/return 302 $scheme:\/\/$http_host\/admin\/login;/g' /etc/nginx/app-location-conf.d/authentication.conf

    - name: Check whether the nginx configuration is valid
      shell: nginx -t

    - name: Restart the Nginx service
      ansible.builtin.systemd:
        name: nginx.service
        state: restarted
        daemon_reload: true

    ##################################################
    # Create folder that can be mounted inside the container for persistance
   
    - name: Create that can be mounted inside the container
      file:
        path: /static
        state: directory
        owner: root
        group: root
        mode: "0777"

    ##################################################
    # Build and Run Next with Docker
    
    - name: Clone Next from Github
      git:
        repo: https://github.com/d3i-infra/mono
        update: yes
        dest: ./mono

    - name: Build Next with Docker build
      shell:
        cmd: docker build --build-arg VERSION=1.0.0 --build-arg BUNDLE=self . -t next:latest
        chdir: mono/core

    - name: Create Docker Compose file
      blockinfile:
        path: /docker-compose.yaml
        create: yes
        block: |
          version: "3"

          services:
             next:
               image: next:latest
               environment:
                 APP_NAME: "{{ app_name }}"
                 APP_DOMAIN: "{{ domain_name }}"
                 APP_MAIL_DOMAIN: "@gmail"
                 APP_ADMINS: "{{ admin_email_gmail }}"
                 DB_NAME: "{{ database_name }}"
                 DB_HOST: 172.17.0.1
                 DB_USER: "{{ database_user }}"
                 DB_PASS: "{{ database_password }}"
                 SECRET_KEY_BASE: "{{ secret_key_base }}"
                 STATIC_PATH: /static
                 UNSPLASH_ACCESS_KEY: "{{ unsplash_access_key }}"
                 UNSPLASH_APP_NAME: "{{ unsplash_app_name }}"
                 GOOGLE_SIGN_IN_CLIENT_ID: "{{ google_sign_in_client_id }}"
                 GOOGLE_SIGN_IN_CLIENT_SECRET: "{{ google_sign_in_client_secret }}"
               logging:
                 driver: "fluentd"
                 options:
                   fluentd-address: 172.17.0.1:24224
                   tag: next
               ports:
                 - "8000:8000"
               network_mode: bridge
               volumes:
                 - /static:/static
               restart: always

    - name: Start container using the compose file
      command: docker-compose -p "next" up -d
      args:
        chdir: /
