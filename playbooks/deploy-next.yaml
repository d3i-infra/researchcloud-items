---
- hosts: 127.0.0.1
  connection: local
  gather_facts: yes
  become: yes
    #vars_files:
    #  - ./external_vars.yaml
  roles:
    - role: nginx
      tags: nginx_tag
    - role: td-agent
      tags: td-agent_tag
    - role: rsyslogd
      tags: rsyslogd_tag
    - role: docker
      tags: docker_tag
  tasks:

    ##################################################
    # Configure Nginx as a reverse proxy
    # This configuration is dependent on the SRC-NGINX component provided by Surf
    
    # Create authentication script
    - name: Ensure auth directory exists
      file:
        path: /auth
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create auth.sh script
      copy:
        dest: /auth/auth.sh
        content: |
          #!/bin/bash
          username="$USERNAME"
          userid=$(id -u "$username" 2>/dev/null)
          if [ $? -ne 0 ]; then
              echo -e "Status: 403 Forbidden\n"
              echo "Authorization failed"
          else
              echo "Status: 200"
              echo "X-Accel-Redirect: /protected"
              echo "X-Username: $username"
              echo ""
          fi
        owner: www-data
        group: www-data
        mode: '0755'
    
    - name: Add ansible markers in /etc/nginx/conf.d/ssl_main.conf
      shell: perl -0 -i -pe 's/(.*server {.*?})(.*?)(listen 443.*)/\1\n# BEGIN ANSIBLE MANAGED BLOCK\n# END ANSIBLE MANAGED BLOCK\n\3/gms' /etc/nginx/conf.d/ssl_main.conf

    # Configure Nginx as reverse proxy added configs for Phoenix
    # The admin route is protected by Surf SRAM
    - name: Fill the location block of the ssl block
      blockinfile:
        path: /etc/nginx/conf.d/ssl_main.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          location /admin {
            error_page 401 = @custom_401;
            auth_request /validate;
            auth_request_set $username $upstream_http_username;

            include /etc/nginx/fastcgi_params;
            fastcgi_pass unix:/var/run/fcgiwrap.socket;
            fastcgi_param SCRIPT_FILENAME /auth/auth.sh;
            fastcgi_param USERNAME $username;
          }

          location /protected {
            internal;

            set $username_param "";
            if ($http_x_username != "") {
              set $username "$http_x_username";
            }

            proxy_pass                http://localhost:8000/admin/login/$username;
            proxy_set_header          X-Forwarded-Proto $scheme;
            proxy_set_header          X-Forwarded-For $remote_addr;
            proxy_set_header          X-Real-IP $remote_addr;
            proxy_set_header          Host $http_host;
            proxy_http_version        1.1;
            proxy_set_header          Upgrade $http_upgrade;
            proxy_set_header          Connection "upgrade";
            proxy_max_temp_file_size  1m;
          }

          location / {
            allow all;
            proxy_pass                http://localhost:8000;
            proxy_set_header          X-Forwarded-Proto $scheme;
            proxy_set_header          X-Forwarded-For $remote_addr;
            proxy_set_header          X-Real-IP $remote_addr;
            proxy_set_header          Host $http_host;
            proxy_http_version        1.1;
            proxy_set_header          Upgrade $http_upgrade;
            proxy_set_header          Connection "upgrade";
            proxy_max_temp_file_size  1m;
          }

    - name: Check whether the nginx configuration is valid
      shell: nginx -t

    - name: Restart the Nginx service
      ansible.builtin.systemd:
        name: nginx.service
        state: restarted
        daemon_reload: true

    ##################################################
    # Build and Run Next with Docker
    
    - name: Clone Next from Github
      git:
        repo: https://github.com/d3i-infra/mono
        update: yes
        dest: ./mono

    # create certificates for postgres
    - name: Run certificate generation script
      script: ./mono/postgres_ssl/generate.sh

    - name: Copy server.crt to root directory
      copy:
        src: server.crt
        dest: /server.crt

    - name: Copy server.key to root directory
      copy:
        src: server.key
        dest: /server.key

    - name: Copy ca.crt to root directory
      copy:
        src: ca.crt
        dest: /server.key

    # build
    - name: Build Next with Docker build
      shell:
        cmd: docker build --build-arg VERSION=1.0.0 --build-arg BUNDLE=self . -t next:latest
        chdir: mono/core

    # deploy
    - name: Create Docker Compose file
      blockinfile:
        path: /docker-compose.yaml
        create: yes
        block: |
          version: "3"

          services:
            app:
              image: self-d3i:latest
              container_name: self-d3i
              restart: always
              environment:
                APP_NAME: "{{ app_name }}"
                APP_DOMAIN: "{{ domain_name }}"
                APP_MAIL_DOMAIN: "@notrelevantanymore.com"
                APP_ADMINS: "{{ surf_username }}"
                DB_NAME: "{{ database_name }}"
                DB_HOST: 172.17.0.1
                DB_USER: "{{ database_user }}"
                DB_PASS: "{{ database_password }}"
                SECRET_KEY_BASE: "{{ secret_key_base }}"
                STATIC_PATH: "/tmp"
                UNSPLASH_ACCESS_KEY: "{{ unsplash_access_key }}"
                UNSPLASH_APP_NAME: "{{ unsplash_app_name }}"
                STORAGE_SERVICES: "builtin"
                DB_TLS_VERIFY: verify_peer
                DB_CA_PATH: /ca.crt
              volumes:
                - app_data:/tmp
                - /ca.crt:/ca.crt
              depends_on:
                - db
              logging:
                driver: "fluentd"
                options:
                  fluentd-address: 172.17.0.1:24224
                  tag: next
              ports:
                - "8000:8000"
              network_mode: bridge

            db:
              image: postgres:15
              container_name: db-next
              restart: always
              user: root
              environment:
                POSTGRES_USER: user
                POSTGRES_PASSWORD: password
                POSTGRES_DB: test_database
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - /server.crt:/var/lib/postgresql/ssl/server.crt
                - /server.key:/var/lib/postgresql/ssl/server.key
              command: |
                bash -c "
                  chown postgres:postgres /var/lib/postgresql/ssl/server.key &&
                  exec docker-entrypoint.sh postgres -c ssl=on -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt -c ssl_key_file=/var/lib/postgresql/ssl/server.key
                "

          volumes:
            postgres_data:
            app_data:

    - name: Start container using the compose file
      command: docker-compose -p "next" up -d
      args:
        chdir: /
